"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run_exec = exports.nodemon_installed = void 0;
const child_process_1 = require("child_process");
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
function nodemon_installed() {
    return new Promise((resolve, reject) => {
        child_process_1.exec(`nodemon --version`, (error, std_out) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(std_out.substring(0, 1).match(/\d/) !== null);
            }
        });
    });
}
exports.nodemon_installed = nodemon_installed;
async function run_exec(settings, is_debug) {
    let is_nodemon = await nodemon_installed();
    if (is_debug) {
        if (settings.language == 'typescript') {
            let is_nodemon = await nodemon_installed();
            let te = is_nodemon ? `nodemon --watch src -e ts --exec "tsc -p ."` : 'tsc -p .';
            child_process_1.spawn(te, { shell: true, stdio: 'inherit' });
        }
    }
    else {
        await fs.mkdirp(path.join(process.cwd(), 'out'));
        let deploy_exec = `node ../segment-local-functions/out/cli/sloth.js deploy --is_dev --out_file=${path.join(process.cwd(), 'out', 'function.js')}`;
        let te = is_nodemon ?
            `nodemon --watch src -e ${settings.language == 'javascript' ? 'js' : 'ts'} --exec "${deploy_exec}"` :
            deploy_exec;
        child_process_1.spawn(te, { shell: true, stdio: 'inherit' });
    }
    // if (settings.language == 'typescript') {
    //   let is_nodemon = await nodemon_installed()
    //   let te = is_nodemon ? `nodemon --watch src -e ts --exec "tsc -p ."` : 'tsc -p .'
    //   spawn(te, { shell: true, stdio: 'inherit' })
    // }
    let e = `sam local start-api --port ${settings.sam_port}`;
    if (is_debug) {
        e = `${e} --debug-port ${settings.debug_port}`;
    }
    child_process_1.spawn(e, { shell: true, stdio: 'inherit' });
}
exports.run_exec = run_exec;
//# sourceMappingURL=sam.js.map