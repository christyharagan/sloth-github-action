"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ngrok_installed = exports.get_proxy_url = exports.launch = void 0;
const child_process_1 = require("child_process");
const node_fetch_1 = __importDefault(require("node-fetch"));
async function launch(port) {
    let url;
    try {
        url = await get_proxy_url(port);
    }
    catch (e) { }
    if (url) {
        return [url, true];
    }
    child_process_1.exec('ngrok http ' + port, (error, stdout) => {
        if (error) {
            console.error(error);
        }
    });
    await new Promise(resolve => setTimeout(resolve, 1000));
    return [await get_proxy_url(port), false];
}
exports.launch = launch;
async function get_proxy_url(port) {
    let resp = await node_fetch_1.default('http://127.0.0.1:4040/api/tunnels');
    let j = await resp.json();
    let tunnels = j.tunnels;
    let tunnel = tunnels.find(tunnel => tunnel.config.addr == 'http://localhost:' + port);
    return tunnel ? tunnel.public_url : undefined;
}
exports.get_proxy_url = get_proxy_url;
function ngrok_installed() {
    return new Promise((resolve, reject) => {
        child_process_1.exec(`ngrok --version`, (error, std_out) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(std_out.substring(0, 5) == 'ngrok');
            }
        });
    });
}
exports.ngrok_installed = ngrok_installed;
//# sourceMappingURL=ngrok.js.map