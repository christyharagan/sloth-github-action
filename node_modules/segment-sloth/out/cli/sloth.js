#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = __importStar(require("yargs"));
const init_1 = require("./init");
const test_1 = require("./test");
const __1 = require("..");
const debug_1 = require("./debug");
const sync_tp_1 = require("./sync_tp");
const check_deps_1 = require("./check_deps");
yargs
    .command('init [options_dir]', 'Create and initialise a new project in the current working directory. If the options_dir is provided, then a sloth.yaml is checked for, and if exists, uses that to initialise the project folder.', {
    'options_only': {
        description: 'When this argument is provided, only the settings file (sloth.yaml) will be written; the project files won\'t be created',
        boolean: true,
        alias: 'oo'
    },
    'overwrite_fn': {
        description: 'When an options file is provided, use this argument to enable overwriting of existing functions in the workspace',
        boolean: true,
        alias: 'of'
    },
    'advanced': {
        description: 'Pass this argument to run the fully wizard with all options configurable. Default is to run standard mode with certain options predefined.',
        boolean: true,
        alias: 'a'
    }
}, args => {
    init_1.init(args.options_only || false, args.options_dir, args.overwrite_fn, args.advanced);
})
    .command('deploy [access_token] [work_id] [work_slug]', 'Deploy the function to your Segment workspace (or output to a file)', {
    'out_file': {
        description: 'When this argument is provided, this command will output the deployment code to this file, rather than upload to your Segment workspace',
        string: true,
        alias: 'o'
    },
    'is_dev': {
        description: 'Use this when out_file is provided. Will deploy code with source-maps back to the original code; useful for tests or development where stack traces need to display line numbers',
        boolean: true,
        alias: 'd'
    }
}, args => {
    __1.deploy(!!args.is_dev, args.access_token, args.work_slug, args.work_id, args.out_file);
})
    .command('sync_tp [access_token]', 'Sync the Segment tracking plan locally', args => {
    sync_tp_1.sync_tp(args.argv.access_token);
})
    .command('test', 'Launch the test environment', () => {
    test_1.test();
})
    .command('debug <type> [access_token]', 'Launch the debug environment (local, remote, segment)', {
    'tunnel': {
        description: 'This is the external URL of the SAM instance. Use this if running on a server that will expose the SAM instance, instead of using ngrok',
        string: true,
        alias: 't'
    }
}, args => {
    let t = args.type;
    if (t !== 'local' && t !== 'remote' && t !== 'segment') {
        console.error('Type argument must be either "local", "remote", or "segment"');
        return;
    }
    debug_1.debug(t, args.access_token, args.tunnel);
})
    .command('check_deps', 'Check the function dependencies will work in the Segment environment', args => {
    check_deps_1.check_deps();
})
    .demandCommand()
    .argv;
//# sourceMappingURL=sloth.js.map