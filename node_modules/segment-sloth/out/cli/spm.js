#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = __importStar(require("yargs"));
const os = __importStar(require("os"));
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const yaml_1 = __importDefault(require("yaml"));
const child_process_1 = require("child_process");
const HOME_DIR = os.homedir();
const SPM_DIR = path.join(HOME_DIR, '.spm');
const SPM_PACKAGES_DIR = path.join(SPM_DIR, 'packages');
const SPM_SETTINGS_FILE = path.join(SPM_DIR, 'settings.yaml');
async function load_settings(file) {
    if (fs.existsSync(file)) {
        let f = await fs.readFile(file, 'utf8');
        return yaml_1.default.parse(f);
    }
    else {
        return undefined;
    }
}
async function save_settings(file, settings) {
    await fs.writeFile(file, yaml_1.default.stringify(settings), 'utf8');
}
yargs
    .command('install <github_repo>', '', {}, async (args) => {
    let r = args.github_repo;
    let rs = r.split('/');
    if (rs.length !== 2) {
        throw 'Invalid package name. Package name must follow the pattern: GITHUB_USER/GITHUB_REPO';
    }
    let [u, p] = rs;
    let settings = await load_settings(SPM_SETTINGS_FILE);
    if (settings) {
        let access_token = settings.access_token;
        let work_id = settings.work_id;
        let work_slug = settings.work_slug;
        let user_dir = path.join(SPM_PACKAGES_DIR, u);
        await fs.mkdirp(user_dir);
        let package_dir = path.join(user_dir, p);
        if (fs.existsSync(package_dir) && fs.existsSync(path.join(package_dir, '.git'))) {
            // Package already exists, pull latest changes
            await new Promise((resolve, reject) => {
                child_process_1.exec(`cd ${user_dir} && git pull`, (error, std_out) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve();
                    }
                });
            });
        }
        else {
            // Clone package
            let ghr = `https://github.com/${u}/${p}.git`;
            await new Promise((resolve, reject) => {
                child_process_1.exec(`cd ${user_dir} && git clone ${ghr}`, (error, std_out) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve();
                    }
                });
            });
        }
        await new Promise((resolve, reject) => {
            child_process_1.exec(`cd ${package_dir} && npm i && sloth deploy ${access_token} ${work_id} ${work_slug}`, (error, std_out) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    }
    else {
        console.log('SPM hasn\'t been setup. Run "spm setup --help" for details');
    }
    // }
})
    .command('setup', '', {
    aliases: 's',
    builder: {
        'access_token': {
            description: 'The access token for the workspace',
            string: true,
            alias: 'a',
            required: true
        },
        'work_id': {
            description: 'The workspace ID',
            string: true,
            alias: 'i',
            required: true
        },
        'work_slug': {
            description: 'The workspace slug',
            string: true,
            alias: 's',
            required: true
        }
    },
    handler: async (args) => {
        await fs.mkdirp(SPM_DIR);
        const settings = {
            access_token: args.access_token,
            work_id: args.work_id,
            work_slug: args.work_slug
        };
        await save_settings(SPM_SETTINGS_FILE, settings);
    }
})
    .demandCommand()
    .argv;
//# sourceMappingURL=spm.js.map